%{
open SVProject1.Ast
%}

%token <int> Number
%token <string> ID
%token EOF LPAREN RPAREN
       IF THEN ELSE UNDEF
       COLON SEMICOLON COMMA EQ
       PLUS MINUS MULT

%left EQ
%left PLUS MINUS
%left MULT

%start prog
%type <SVProject1.Ast.Program> prog
%%

prog: funcn SEMICOLON expr SEMICOLON decn SEMICOLON EOF { Program($1, $3, $5) }

funcn
    : ID LPAREN RPAREN EQ expr                          { [FuncDec($1, [], $5)] }
    | ID LPAREN params RPAREN EQ expr                   { [FuncDec($1, $3, $6)] }
    | funcn COMMA funcn                                 { $1 @ $3 }
    /* empty */
    |                                                   { [] }

params
    : ID                                                { [$1] }
    | ID COMMA params                                   { $1 :: $3 }

expr
    : factor                                            { $1 }
    | expr PLUS expr                                    { EOp($1, Plus, $3) }
    | expr MINUS expr                                   { EOp($1, Minus, $3) }
    | expr MULT expr                                    { EOp($1, Mult, $3) }

factor
    : Number                                            { ENum(Some $1) }
    | UNDEF                                             { ENum(None) }
    | MINUS Number                                      { ENum(Some -$2) }
    | MINUS UNDEF                                       { ENum(None) }
    | ID                                                { EVar $1 }
    | func                                              { $1 }
    | LPAREN expr RPAREN                                { $2 }
    | IF expr THEN expr ELSE expr                       { ECond($2, $4, $6) }

paramExpr
    : expr                                              { [$1] }
    | expr COMMA paramExpr                              { [$1] @ $3 }

func
    : ID LPAREN RPAREN                                  { EFunc($1, []) }
    | ID LPAREN paramExpr RPAREN                        { EFunc($1, $3) }

decn
    : ID EQ Number                                      { [Def($1, Some $3)] }
    | ID EQ UNDEF                                       { [Def($1, None)] }
    | decn COMMA decn                                   { $1 @ $3 }
    /* empty */
    |                                                   { [] }
