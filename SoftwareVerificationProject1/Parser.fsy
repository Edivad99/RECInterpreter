%{
let getOp op =
    match op with
    | "+" -> ( + )
    | "-" -> ( - )
    | "*" -> ( * )
    | _ -> failwith "unknown operator"
%}

%token <int> Number
%token <string> OP
%token <string> ID
%token EOF LPAREN RPAREN
       IF THEN ELSE UNDEF
       COLON SEMICOLON COMMA EQ

%start prog
%type <int> prog
%%

prog: funcn SEMICOLON expr SEMICOLON decn SEMICOLON EOF { $1 }

funcn // function declaration, aka first part in parser
    : ID LPAREN RPAREN EQ expr
    | ID LPAREN params RPAREN EQ expr
    | funcn COMMA funcn // multiple declarations

params
    : ID
    | ID COMMA params

expr
    : term + expr
    | term - minus
    | term

term
    : factor * term
    | factor

minus
    : term
    | term - minus


factor
    : n
    | var
    | func
    | LPAREN expr RPAREN
    | IF expr THEN expr ELSE expr

func
    : ID LPAREN ID RPAREN