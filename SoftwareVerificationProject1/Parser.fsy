%{
let getOp op =
    match op with
    | "+" -> ( + )
    | "-" -> ( - )
    | "*" -> ( * )
    | _ -> failwith "unknown operator"
%}

%token <int> Number
%token <string> OP
%token <string> ID
%token EOF LPAREN RPAREN
       IF THEN ELSE UNDEF
       COLON SEMICOLON COMMA EQ
       PLUS MINUS MULT

%start prog
%type <int> prog
%%

prog: funcn SEMICOLON expr SEMICOLON decn SEMICOLON EOF { 1 }

funcn // function declaration, aka first part in parser
    : ID LPAREN RPAREN EQ expr { 1 }
    | ID LPAREN params RPAREN EQ expr { 1 }
    | funcn COMMA funcn { 1 } // multiple declarations 

params
    : ID { 1 }
    | ID COMMA params { 1 }

expr
    : term PLUS expr { 1 }
    | term MINUS minus { 1 }
    | term { 1 }

term
    : factor MULT term { 1 }
    | factor { 1 }

minus
    : term { 1 }
    | term MINUS minus { 1 }


factor
    : Number { 1 }
    | ID { 1 }
    | func { 1 }
    | LPAREN expr RPAREN { 1 }
    | IF expr THEN expr ELSE expr { 1 }

func
    : ID LPAREN ID RPAREN { 1 }

decn
    : ID EQ Number { 1 }
    | decn COMMA decn { 1 }