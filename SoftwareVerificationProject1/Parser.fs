// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open SVProject1.Ast

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAREN
  | RPAREN
  | IF
  | THEN
  | ELSE
  | UNDEF
  | COLON
  | SEMICOLON
  | COMMA
  | EQ
  | PLUS
  | MINUS
  | MULT
  | ID of (string)
  | OP of (string)
  | Number of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_UNDEF
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_EQ
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_ID
    | TOKEN_OP
    | TOKEN_Number
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_prog
    | NONTERM_funcn
    | NONTERM_params
    | NONTERM_expr
    | NONTERM_term
    | NONTERM_minus
    | NONTERM_factor
    | NONTERM_paramExpr
    | NONTERM_func
    | NONTERM_decn

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAREN  -> 1 
  | RPAREN  -> 2 
  | IF  -> 3 
  | THEN  -> 4 
  | ELSE  -> 5 
  | UNDEF  -> 6 
  | COLON  -> 7 
  | SEMICOLON  -> 8 
  | COMMA  -> 9 
  | EQ  -> 10 
  | PLUS  -> 11 
  | MINUS  -> 12 
  | MULT  -> 13 
  | ID _ -> 14 
  | OP _ -> 15 
  | Number _ -> 16 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAREN 
  | 2 -> TOKEN_RPAREN 
  | 3 -> TOKEN_IF 
  | 4 -> TOKEN_THEN 
  | 5 -> TOKEN_ELSE 
  | 6 -> TOKEN_UNDEF 
  | 7 -> TOKEN_COLON 
  | 8 -> TOKEN_SEMICOLON 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_EQ 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_MINUS 
  | 13 -> TOKEN_MULT 
  | 14 -> TOKEN_ID 
  | 15 -> TOKEN_OP 
  | 16 -> TOKEN_Number 
  | 19 -> TOKEN_end_of_input
  | 17 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_prog 
    | 2 -> NONTERM_funcn 
    | 3 -> NONTERM_funcn 
    | 4 -> NONTERM_funcn 
    | 5 -> NONTERM_params 
    | 6 -> NONTERM_params 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_term 
    | 11 -> NONTERM_term 
    | 12 -> NONTERM_minus 
    | 13 -> NONTERM_minus 
    | 14 -> NONTERM_factor 
    | 15 -> NONTERM_factor 
    | 16 -> NONTERM_factor 
    | 17 -> NONTERM_factor 
    | 18 -> NONTERM_factor 
    | 19 -> NONTERM_paramExpr 
    | 20 -> NONTERM_paramExpr 
    | 21 -> NONTERM_func 
    | 22 -> NONTERM_decn 
    | 23 -> NONTERM_decn 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 19 
let _fsyacc_tagOfErrorTerminal = 17

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | UNDEF  -> "UNDEF" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMA  -> "COMMA" 
  | EQ  -> "EQ" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | ID _ -> "ID" 
  | OP _ -> "OP" 
  | Number _ -> "Number" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | UNDEF  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Number _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;19us;18us;2us;65535us;10us;14us;21us;22us;10us;65535us;3us;4us;12us;13us;16us;17us;24us;25us;37us;38us;40us;41us;42us;43us;44us;45us;47us;46us;49us;46us;13us;65535us;3us;23us;12us;23us;16us;23us;24us;23us;26us;31us;29us;30us;32us;31us;37us;23us;40us;23us;42us;23us;44us;23us;47us;23us;49us;23us;2us;65535us;26us;27us;32us;33us;13us;65535us;3us;28us;12us;28us;16us;28us;24us;28us;26us;28us;29us;28us;32us;28us;37us;28us;40us;28us;42us;28us;44us;28us;47us;28us;49us;28us;2us;65535us;47us;48us;49us;50us;13us;65535us;3us;36us;12us;36us;16us;36us;24us;36us;26us;36us;29us;36us;32us;36us;37us;36us;40us;36us;42us;36us;44us;36us;47us;36us;49us;36us;2us;65535us;5us;6us;56us;55us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;9us;20us;34us;37us;51us;54us;68us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;4us;1us;1us;1us;1us;1us;1us;2us;1us;23us;1us;1us;1us;1us;2us;2us;3us;2us;2us;3us;1us;2us;1us;2us;1us;2us;1us;3us;1us;3us;1us;3us;1us;3us;2us;4us;4us;1us;4us;2us;5us;6us;1us;6us;1us;6us;3us;7us;8us;9us;1us;7us;1us;7us;1us;8us;1us;8us;2us;10us;11us;1us;10us;1us;10us;2us;12us;13us;1us;13us;1us;13us;1us;14us;2us;15us;21us;1us;16us;1us;17us;1us;17us;1us;17us;1us;18us;1us;18us;1us;18us;1us;18us;1us;18us;1us;18us;2us;19us;20us;1us;20us;1us;20us;1us;21us;1us;21us;1us;21us;1us;22us;1us;22us;1us;22us;2us;23us;23us;1us;23us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;11us;13us;16us;18us;20us;23us;26us;28us;30us;32us;34us;36us;38us;40us;43us;45us;48us;50us;52us;56us;58us;60us;62us;64us;67us;69us;71us;74us;76us;78us;80us;83us;85us;87us;89us;91us;93us;95us;97us;99us;101us;103us;106us;108us;110us;112us;114us;116us;118us;120us;122us;125us;|]
let _fsyacc_action_rows = 57
let _fsyacc_actionTableElements = [|1us;32768us;14us;9us;0us;49152us;2us;32768us;8us;3us;9us;19us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;1us;32768us;8us;5us;1us;32768us;14us;52us;2us;32768us;8us;7us;9us;56us;1us;32768us;0us;8us;0us;16385us;1us;32768us;1us;10us;2us;32768us;2us;11us;14us;20us;1us;32768us;10us;12us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;0us;16386us;1us;32768us;2us;15us;1us;32768us;10us;16us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;0us;16387us;1us;16388us;9us;19us;1us;32768us;14us;9us;1us;16389us;9us;21us;1us;32768us;14us;20us;0us;16390us;2us;16393us;11us;24us;12us;26us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;0us;16391us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;0us;16392us;1us;16395us;13us;29us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;0us;16394us;1us;16396us;12us;32us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;0us;16397us;0us;16398us;1us;16399us;1us;49us;0us;16400us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;1us;32768us;2us;39us;0us;16401us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;1us;32768us;4us;42us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;1us;32768us;5us;44us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;0us;16402us;1us;16403us;9us;47us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;0us;16404us;4us;32768us;1us;37us;3us;40us;14us;35us;16us;34us;1us;32768us;2us;51us;0us;16405us;1us;32768us;10us;53us;1us;32768us;16us;54us;0us;16406us;1us;16407us;9us;56us;1us;32768us;14us;52us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;6us;11us;13us;15us;18us;20us;21us;23us;26us;28us;33us;34us;36us;38us;43us;44us;46us;48us;50us;52us;53us;56us;61us;62us;67us;68us;70us;75us;76us;78us;83us;84us;85us;87us;88us;93us;95us;96us;101us;103us;108us;110us;115us;116us;118us;123us;124us;129us;131us;132us;134us;136us;137us;139us;|]
let _fsyacc_reductionSymbolCounts = [|1us;7us;5us;6us;3us;1us;3us;3us;3us;1us;3us;1us;1us;3us;1us;1us;1us;3us;6us;1us;3us;4us;3us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;3us;3us;4us;4us;4us;5us;5us;6us;6us;7us;7us;7us;7us;7us;8us;8us;9us;10us;10us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;65535us;65535us;65535us;65535us;16385us;65535us;65535us;65535us;65535us;16386us;65535us;65535us;65535us;16387us;65535us;65535us;65535us;65535us;16390us;65535us;65535us;16391us;65535us;16392us;65535us;65535us;16394us;65535us;65535us;16397us;16398us;65535us;16400us;65535us;65535us;16401us;65535us;65535us;65535us;65535us;65535us;16402us;65535us;65535us;16404us;65535us;65535us;16405us;65535us;65535us;16406us;65535us;65535us;|]
let _fsyacc_reductions = lazy [|
# 194 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SVProject1.Ast.Program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 203 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funcn in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_decn in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 17 "Parser.fsy"
                                                                               Program(_1, _3, _5) 
                   )
# 17 "Parser.fsy"
                 : SVProject1.Ast.Program));
# 216 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                                                                               [FuncDec(_1, [], _5)] 
                   )
# 20 "Parser.fsy"
                 : 'gentype_funcn));
# 228 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_params in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                                                                               [FuncDec(_1, _3, _6)] 
                   )
# 21 "Parser.fsy"
                 : 'gentype_funcn));
# 241 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funcn in
            let _3 = parseState.GetInput(3) :?> 'gentype_funcn in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                                                               _1 @ _3 
                   )
# 22 "Parser.fsy"
                 : 'gentype_funcn));
# 253 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                                                               [_1] 
                   )
# 25 "Parser.fsy"
                 : 'gentype_params));
# 264 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_params in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                                                               _1 :: _3 
                   )
# 26 "Parser.fsy"
                 : 'gentype_params));
# 276 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                                                               EOp(_1, Plus, _3) 
                   )
# 29 "Parser.fsy"
                 : 'gentype_expr));
# 288 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> 'gentype_minus in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                                               EOp(_1, Minus, _3) 
                   )
# 30 "Parser.fsy"
                 : 'gentype_expr));
# 300 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                                                               _1 
                   )
# 31 "Parser.fsy"
                 : 'gentype_expr));
# 311 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_factor in
            let _3 = parseState.GetInput(3) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                                               EOp(_1, Mult, _3) 
                   )
# 34 "Parser.fsy"
                 : 'gentype_term));
# 323 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_factor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                                               _1 
                   )
# 35 "Parser.fsy"
                 : 'gentype_term));
# 334 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                                               _1 
                   )
# 38 "Parser.fsy"
                 : 'gentype_minus));
# 345 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> 'gentype_minus in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                                               EOp(_1, Minus, _3) 
                   )
# 39 "Parser.fsy"
                 : 'gentype_minus));
# 357 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                                               ENum(Some _1) 
                   )
# 43 "Parser.fsy"
                 : 'gentype_factor));
# 368 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                                               EVar _1 
                   )
# 44 "Parser.fsy"
                 : 'gentype_factor));
# 379 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_func in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                                               _1 
                   )
# 45 "Parser.fsy"
                 : 'gentype_factor));
# 390 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                                               _2 
                   )
# 46 "Parser.fsy"
                 : 'gentype_factor));
# 401 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                                               ECond(_2, _4, _6) 
                   )
# 47 "Parser.fsy"
                 : 'gentype_factor));
# 414 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                               [_1] 
                   )
# 50 "Parser.fsy"
                 : 'gentype_paramExpr));
# 425 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_paramExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                               [_1] @ _3 
                   )
# 51 "Parser.fsy"
                 : 'gentype_paramExpr));
# 437 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_paramExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                                               EFunc(_1, _3) 
                   )
# 54 "Parser.fsy"
                 : 'gentype_func));
# 449 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                                               [Def(_1, Some _3)] 
                   )
# 57 "Parser.fsy"
                 : 'gentype_decn));
# 461 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_decn in
            let _3 = parseState.GetInput(3) :?> 'gentype_decn in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                                               _1 @ _3 
                   )
# 58 "Parser.fsy"
                 : 'gentype_decn));
|]
# 474 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 20;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf : SVProject1.Ast.Program =
    engine lexer lexbuf 0 :?> _
