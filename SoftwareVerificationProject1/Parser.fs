// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open SVProject1.Ast

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAREN
  | RPAREN
  | IF
  | THEN
  | ELSE
  | UNDEF
  | COLON
  | SEMICOLON
  | COMMA
  | EQ
  | PLUS
  | MINUS
  | MULT
  | ID of (string)
  | Number of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_UNDEF
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_EQ
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_ID
    | TOKEN_Number
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_prog
    | NONTERM_funcn
    | NONTERM_params
    | NONTERM_expr
    | NONTERM_term
    | NONTERM_minus
    | NONTERM_factor
    | NONTERM_paramExpr
    | NONTERM_func
    | NONTERM_decn

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAREN  -> 1 
  | RPAREN  -> 2 
  | IF  -> 3 
  | THEN  -> 4 
  | ELSE  -> 5 
  | UNDEF  -> 6 
  | COLON  -> 7 
  | SEMICOLON  -> 8 
  | COMMA  -> 9 
  | EQ  -> 10 
  | PLUS  -> 11 
  | MINUS  -> 12 
  | MULT  -> 13 
  | ID _ -> 14 
  | Number _ -> 15 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAREN 
  | 2 -> TOKEN_RPAREN 
  | 3 -> TOKEN_IF 
  | 4 -> TOKEN_THEN 
  | 5 -> TOKEN_ELSE 
  | 6 -> TOKEN_UNDEF 
  | 7 -> TOKEN_COLON 
  | 8 -> TOKEN_SEMICOLON 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_EQ 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_MINUS 
  | 13 -> TOKEN_MULT 
  | 14 -> TOKEN_ID 
  | 15 -> TOKEN_Number 
  | 18 -> TOKEN_end_of_input
  | 16 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_prog 
    | 2 -> NONTERM_funcn 
    | 3 -> NONTERM_funcn 
    | 4 -> NONTERM_funcn 
    | 5 -> NONTERM_params 
    | 6 -> NONTERM_params 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_term 
    | 11 -> NONTERM_term 
    | 12 -> NONTERM_minus 
    | 13 -> NONTERM_minus 
    | 14 -> NONTERM_factor 
    | 15 -> NONTERM_factor 
    | 16 -> NONTERM_factor 
    | 17 -> NONTERM_factor 
    | 18 -> NONTERM_factor 
    | 19 -> NONTERM_factor 
    | 20 -> NONTERM_paramExpr 
    | 21 -> NONTERM_paramExpr 
    | 22 -> NONTERM_func 
    | 23 -> NONTERM_func 
    | 24 -> NONTERM_decn 
    | 25 -> NONTERM_decn 
    | 26 -> NONTERM_decn 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 18 
let _fsyacc_tagOfErrorTerminal = 16

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | UNDEF  -> "UNDEF" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMA  -> "COMMA" 
  | EQ  -> "EQ" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | ID _ -> "ID" 
  | Number _ -> "Number" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | UNDEF  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Number _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;19us;18us;2us;65535us;10us;14us;21us;22us;10us;65535us;3us;4us;12us;13us;16us;17us;24us;25us;38us;39us;41us;42us;43us;44us;45us;46us;48us;47us;50us;47us;13us;65535us;3us;23us;12us;23us;16us;23us;24us;23us;26us;31us;29us;30us;32us;31us;38us;23us;41us;23us;43us;23us;45us;23us;48us;23us;50us;23us;2us;65535us;26us;27us;32us;33us;13us;65535us;3us;28us;12us;28us;16us;28us;24us;28us;26us;28us;29us;28us;32us;28us;38us;28us;41us;28us;43us;28us;45us;28us;48us;28us;50us;28us;2us;65535us;48us;49us;50us;52us;13us;65535us;3us;37us;12us;37us;16us;37us;24us;37us;26us;37us;29us;37us;32us;37us;38us;37us;41us;37us;43us;37us;45us;37us;48us;37us;50us;37us;2us;65535us;5us;6us;59us;58us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;9us;20us;34us;37us;51us;54us;68us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;4us;1us;1us;1us;1us;1us;1us;2us;1us;26us;1us;1us;1us;1us;2us;2us;3us;2us;2us;3us;1us;2us;1us;2us;1us;2us;1us;3us;1us;3us;1us;3us;1us;3us;2us;4us;4us;1us;4us;2us;5us;6us;1us;6us;1us;6us;3us;7us;8us;9us;1us;7us;1us;7us;1us;8us;1us;8us;2us;10us;11us;1us;10us;1us;10us;2us;12us;13us;1us;13us;1us;13us;1us;14us;1us;15us;3us;16us;22us;23us;1us;17us;1us;18us;1us;18us;1us;18us;1us;19us;1us;19us;1us;19us;1us;19us;1us;19us;1us;19us;2us;20us;21us;1us;21us;1us;21us;2us;22us;23us;1us;22us;1us;23us;1us;23us;2us;24us;25us;2us;24us;25us;1us;24us;1us;25us;2us;26us;26us;1us;26us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;11us;13us;16us;18us;20us;23us;26us;28us;30us;32us;34us;36us;38us;40us;43us;45us;48us;50us;52us;56us;58us;60us;62us;64us;67us;69us;71us;74us;76us;78us;80us;82us;86us;88us;90us;92us;94us;96us;98us;100us;102us;104us;106us;109us;111us;113us;116us;118us;120us;122us;125us;128us;130us;132us;135us;|]
let _fsyacc_action_rows = 60
let _fsyacc_actionTableElements = [|1us;32768us;14us;9us;0us;49152us;2us;32768us;8us;3us;9us;19us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;1us;32768us;8us;5us;1us;32768us;14us;54us;2us;32768us;8us;7us;9us;59us;1us;32768us;0us;8us;0us;16385us;1us;32768us;1us;10us;2us;32768us;2us;11us;14us;20us;1us;32768us;10us;12us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;0us;16386us;1us;32768us;2us;15us;1us;32768us;10us;16us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;0us;16387us;1us;16388us;9us;19us;1us;32768us;14us;9us;1us;16389us;9us;21us;1us;32768us;14us;20us;0us;16390us;2us;16393us;11us;24us;12us;26us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;0us;16391us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;0us;16392us;1us;16395us;13us;29us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;0us;16394us;1us;16396us;12us;32us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;0us;16397us;0us;16398us;0us;16399us;1us;16400us;1us;50us;0us;16401us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;1us;32768us;2us;40us;0us;16402us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;1us;32768us;4us;43us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;1us;32768us;5us;45us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;0us;16403us;1us;16404us;9us;48us;5us;32768us;1us;38us;3us;41us;6us;35us;14us;36us;15us;34us;0us;16405us;6us;32768us;1us;38us;2us;51us;3us;41us;6us;35us;14us;36us;15us;34us;0us;16406us;1us;32768us;2us;53us;0us;16407us;1us;32768us;10us;55us;2us;32768us;6us;57us;15us;56us;0us;16408us;0us;16409us;1us;16410us;9us;59us;1us;32768us;14us;54us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;6us;12us;14us;16us;19us;21us;22us;24us;27us;29us;35us;36us;38us;40us;46us;47us;49us;51us;53us;55us;56us;59us;65us;66us;72us;73us;75us;81us;82us;84us;90us;91us;92us;93us;95us;96us;102us;104us;105us;111us;113us;119us;121us;127us;128us;130us;136us;137us;144us;145us;147us;148us;150us;153us;154us;155us;157us;|]
let _fsyacc_reductionSymbolCounts = [|1us;7us;5us;6us;3us;1us;3us;3us;3us;1us;3us;1us;1us;3us;1us;1us;1us;1us;3us;6us;1us;3us;3us;4us;3us;3us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;3us;3us;4us;4us;4us;5us;5us;6us;6us;7us;7us;7us;7us;7us;7us;8us;8us;9us;9us;10us;10us;10us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;65535us;65535us;65535us;65535us;16385us;65535us;65535us;65535us;65535us;16386us;65535us;65535us;65535us;16387us;65535us;65535us;65535us;65535us;16390us;65535us;65535us;16391us;65535us;16392us;65535us;65535us;16394us;65535us;65535us;16397us;16398us;16399us;65535us;16401us;65535us;65535us;16402us;65535us;65535us;65535us;65535us;65535us;16403us;65535us;65535us;16405us;65535us;16406us;65535us;16407us;65535us;65535us;16408us;16409us;65535us;65535us;|]
let _fsyacc_reductions = lazy [|
# 191 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> SVProject1.Ast.Program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 200 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funcn in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_decn in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                                                               Program(_1, _3, _5) 
                   )
# 22 "Parser.fsy"
                 : SVProject1.Ast.Program));
# 213 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                                                               [FuncDec(_1, [], _5)] 
                   )
# 25 "Parser.fsy"
                 : 'gentype_funcn));
# 225 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_params in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                                                               [FuncDec(_1, _3, _6)] 
                   )
# 26 "Parser.fsy"
                 : 'gentype_funcn));
# 238 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funcn in
            let _3 = parseState.GetInput(3) :?> 'gentype_funcn in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                                                               _1 @ _3 
                   )
# 27 "Parser.fsy"
                 : 'gentype_funcn));
# 250 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                                               [_1] 
                   )
# 30 "Parser.fsy"
                 : 'gentype_params));
# 261 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_params in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                                                               _1 :: _3 
                   )
# 31 "Parser.fsy"
                 : 'gentype_params));
# 273 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                                               EOp(_1, Plus, _3) 
                   )
# 34 "Parser.fsy"
                 : 'gentype_expr));
# 285 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> 'gentype_minus in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                                               EOp(_1, Minus, _3) 
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 297 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                                               _1 
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 308 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_factor in
            let _3 = parseState.GetInput(3) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                                               EOp(_1, Mult, _3) 
                   )
# 39 "Parser.fsy"
                 : 'gentype_term));
# 320 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_factor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                                               _1 
                   )
# 40 "Parser.fsy"
                 : 'gentype_term));
# 331 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                                               _1 
                   )
# 43 "Parser.fsy"
                 : 'gentype_minus));
# 342 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_term in
            let _3 = parseState.GetInput(3) :?> 'gentype_minus in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                                               EOp(_1, Minus, _3) 
                   )
# 44 "Parser.fsy"
                 : 'gentype_minus));
# 354 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                                               ENum(Some _1) 
                   )
# 48 "Parser.fsy"
                 : 'gentype_factor));
# 365 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                                               ENum(None) 
                   )
# 49 "Parser.fsy"
                 : 'gentype_factor));
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                               EVar _1 
                   )
# 50 "Parser.fsy"
                 : 'gentype_factor));
# 386 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_func in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                               _1 
                   )
# 51 "Parser.fsy"
                 : 'gentype_factor));
# 397 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                               _2 
                   )
# 52 "Parser.fsy"
                 : 'gentype_factor));
# 408 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                               ECond(_2, _4, _6) 
                   )
# 53 "Parser.fsy"
                 : 'gentype_factor));
# 421 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                                               [_1] 
                   )
# 56 "Parser.fsy"
                 : 'gentype_paramExpr));
# 432 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_paramExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                                               [_1] @ _3 
                   )
# 57 "Parser.fsy"
                 : 'gentype_paramExpr));
# 444 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                                               EFunc(_1, []) 
                   )
# 60 "Parser.fsy"
                 : 'gentype_func));
# 455 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_paramExpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                                               EFunc(_1, _3) 
                   )
# 61 "Parser.fsy"
                 : 'gentype_func));
# 467 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                                               [Def(_1, Some _3)] 
                   )
# 64 "Parser.fsy"
                 : 'gentype_decn));
# 479 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                                               [Def(_1, None)] 
                   )
# 65 "Parser.fsy"
                 : 'gentype_decn));
# 490 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_decn in
            let _3 = parseState.GetInput(3) :?> 'gentype_decn in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                                               _1 @ _3 
                   )
# 66 "Parser.fsy"
                 : 'gentype_decn));
|]
# 503 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 19;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf : SVProject1.Ast.Program =
    engine lexer lexbuf 0 :?> _
