{
open FSharp.Text.Lexing
open Parser

let lexeme lexbuf = LexBuffer<_>.LexemeString lexbuf
}

let whitespace = [' ' '\t']
let digit = ['0'-'9']
let nat = digit+
let int = ['-']?nat

let operator = ['+' '-' '*' '/']

let idbody = ['A'-'Z' 'a'-'z' '0'-'9' '_']*
let Uid = ['A'-'Z' '_'] idbody
let Lid = ['a'-'z' '_'] idbody
let id = Uid | Lid

rule tokenize = parse
| whitespace        { tokenize lexbuf }
| int               { Number (System.Int32.Parse(lexeme lexbuf)) }
| operator          { OP (lexeme lexbuf) }

| "if"              { IF }
| "then"            { THEN }
| "else"            { ELSE }
| "undef"           { UNDEF }
| '='               { EQ }


// brakets
| '('               { LPAREN }
| ')'               { RPAREN }

// punctuation
| ':'               { COLON }
| ";"               { SEMICOLON }
| ','               { COMMA }


// identifiers
| id                { ID (lexeme lexbuf) }

| eof               { EOF }
| _                 { lexeme lexbuf |> sprintf "Parsing error: %s" |> failwith }
